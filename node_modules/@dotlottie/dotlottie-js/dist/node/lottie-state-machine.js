import { union, string, object, number, boolean, optional, array, tuple, nativeEnum, literal, record, any, safeParse, flatten } from 'valibot';
import 'fflate';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var NumericStringBooleanType = union([string("Numeric"), string("String"), string("Boolean")]);
var GuardSchema = object({
  type: NumericStringBooleanType,
  context_key: string(),
  condition_type: string(),
  compare_to: union([string(), number(), boolean()])
});
var NumericEventSchema = object({ value: number() });
var BooleanEventSchema = object({ value: boolean() });
var StringEventSchema = object({ value: string() });
var PointerEventSchema = object({ target: optional(string()) });
var TransitionType = string("Transition");
var TransitionSchema = object({
  type: TransitionType,
  from_state: number(),
  to_state: number(),
  guards: optional(array(GuardSchema)),
  numeric_event: optional(NumericEventSchema),
  boolean_event: optional(BooleanEventSchema),
  string_event: optional(StringEventSchema),
  on_complete_event: optional(object({})),
  on_pointer_down_event: optional(PointerEventSchema),
  on_pointer_up_event: optional(PointerEventSchema),
  on_pointer_enter_event: optional(PointerEventSchema),
  on_pointer_exit_event: optional(PointerEventSchema),
  on_pointer_move_event: optional(PointerEventSchema)
});
var TransitionsSchema = array(TransitionSchema);
var URLActionSchema = object({ type: string(), url: string(), target: string() });
var ThemeActionSchema = object({ type: string(), themeId: string() });
var SoundActionSchema = object({ type: string(), soundId: string() });
var LogActionSchema = object({ type: string(), message: string() });
var ActionSchema = union([URLActionSchema, ThemeActionSchema, SoundActionSchema, LogActionSchema]);
var Modes = union([string("Forward"), string("Reverse"), string("Bounce"), string("ReverseBounce")]);
var StateType = union([string("PlaybackState"), string("FinalState"), string("SyncState"), string("GobalState")]);
var PlaybackStateSchema = object({
  name: string(),
  type: StateType,
  animation_id: optional(string()),
  loop: optional(boolean()),
  autoplay: optional(boolean()),
  mode: optional(Modes),
  speed: optional(number()),
  marker: optional(string()),
  background_color: optional(number()),
  segment: optional(optional(tuple([number(), number()]))),
  use_frame_interpolation: optional(boolean()),
  reset_context: optional(string()),
  entry_actions: optional(array(ActionSchema)),
  exit_actions: optional(array(ActionSchema))
});
var SyncStateSchema = object({
  name: string(),
  type: StateType,
  animation_id: optional(string()),
  frame_context_key: string(),
  background_color: optional(number()),
  segment: optional(optional(tuple([number(), number()]))),
  reset_context: optional(string()),
  entry_actions: optional(array(ActionSchema)),
  exit_actions: optional(array(ActionSchema))
});
var FinalStateSchema = object({
  name: string(),
  type: StateType,
  reset_context: optional(string()),
  entry_actions: optional(array(ActionSchema)),
  exit_actions: optional(array(ActionSchema))
});
var GlobalStateSchema = object({
  name: string(),
  type: StateType,
  reset_context: optional(string()),
  entry_actions: optional(array(ActionSchema)),
  exit_actions: optional(array(ActionSchema))
});
var StateSchema = union([PlaybackStateSchema, SyncStateSchema, FinalStateSchema, GlobalStateSchema]);
var StatesSchema = array(StateSchema);
var ListenerSchema = object({
  type: string(),
  target: optional(string()),
  action: optional(string()),
  value: optional(union([string(), boolean(), number()])),
  context_key: optional(string())
});
var ListenersSchemas = array(ListenerSchema);
var ContextVariableSchema = object({
  type: NumericStringBooleanType,
  key: string(),
  value: union([number(), string(), boolean()])
});
var ContextVariablesSchema = array(ContextVariableSchema);
var DescriptorSchema = object({
  id: string(),
  initial: number()
});
object({
  descriptor: DescriptorSchema,
  states: StatesSchema,
  transitions: TransitionsSchema,
  listeners: ListenersSchemas,
  context_variables: ContextVariablesSchema
});
var PlayMode = /* @__PURE__ */ ((PlayMode2) => {
  PlayMode2["Bounce"] = "bounce";
  PlayMode2["Normal"] = "normal";
  return PlayMode2;
})(PlayMode || {});
var PlayModeSchema = nativeEnum(PlayMode);
var ManifestAnimationSchema = object({
  autoplay: optional(boolean()),
  defaultTheme: optional(string()),
  direction: optional(union([literal(1), literal(-1)])),
  hover: optional(boolean()),
  id: string(),
  intermission: optional(number()),
  loop: optional(union([boolean(), number()])),
  playMode: optional(PlayModeSchema),
  speed: optional(number()),
  themeColor: optional(string())
});
var ManifestThemeSchema = object({
  animations: array(string()),
  id: string()
});
object({
  activeAnimationId: optional(string()),
  animations: array(ManifestAnimationSchema),
  author: optional(string()),
  custom: optional(record(string(), any())),
  description: optional(string()),
  generator: optional(string()),
  keywords: optional(string()),
  revision: optional(number()),
  themes: optional(array(ManifestThemeSchema)),
  states: optional(array(string())),
  version: optional(string())
});

// src/common/utils.ts
var DotLottieError = class extends Error {
  constructor(message, code) {
    super(message);
    __publicField(this, "code");
    this.name = "[dotlottie-js]";
    this.code = code;
  }
};

// src/common/dotlottie-state-machine-common.ts
var DotLottieStateMachineCommon = class {
  constructor(options) {
    __publicField(this, "_descriptor");
    __publicField(this, "_zipOptions");
    __publicField(this, "_states");
    __publicField(this, "_transitions");
    __publicField(this, "_listeners");
    __publicField(this, "_contextVariables");
    this._requireValidContextVariables(options.context_variables);
    this._requireValidListeners(options.listeners);
    this._requireValidTransitions(options.transitions);
    this._requireValidId(options.descriptor.id);
    this._requireValidStates(options.states);
    this._requireValidDescriptor(options.descriptor);
    this._descriptor = options.descriptor;
    this._zipOptions = options.zipOptions ?? {};
    this._states = options.states;
    this._descriptor = options.descriptor;
    this._listeners = options.listeners;
    this._transitions = options.transitions;
    this._contextVariables = options.context_variables;
  }
  get zipOptions() {
    return this._zipOptions;
  }
  set zipOptions(zipOptions) {
    this._zipOptions = zipOptions;
  }
  get id() {
    return this._descriptor.id;
  }
  set id(id) {
    this._requireValidId(id);
    this._descriptor.id = id;
  }
  get states() {
    return this._states;
  }
  set states(states) {
    this._states = states;
  }
  get transitions() {
    return this._transitions;
  }
  set transitions(transitions) {
    this._transitions = transitions;
  }
  get listeners() {
    return this._listeners;
  }
  set listeners(listeners) {
    this._listeners = listeners;
  }
  get contextVariables() {
    return this._contextVariables;
  }
  set contextVariables(contextVariables) {
    this._contextVariables = contextVariables;
  }
  get initial() {
    return this._descriptor.initial;
  }
  set initial(initial) {
    this._descriptor.initial = initial;
  }
  get descriptor() {
    return this._descriptor;
  }
  set descriptor(descriptor) {
    this._descriptor = descriptor;
  }
  toString() {
    return JSON.stringify({
      descriptor: this._descriptor,
      states: this._states,
      transitions: this._transitions,
      context_variables: this._contextVariables,
      listeners: this._listeners
    });
  }
  _requireValidId(id) {
    if (!id) {
      throw new DotLottieError("Invalid id.");
    }
  }
  _requireValidDescriptor(descriptor) {
    const result = safeParse(DescriptorSchema, descriptor);
    if (!result.success) {
      const error = `Invalid state machine declaration, ${JSON.stringify(flatten(result.issues).nested, null, 2)}`;
      throw new DotLottieError(`Invalid descriptor: ${error}`, "INVALID_STATEMACHINE" /* INVALID_STATEMACHINE */);
    }
  }
  _requireValidStates(states) {
    const result = safeParse(StatesSchema, states);
    if (!result.success) {
      const error = `Invalid state machine declaration, ${JSON.stringify(flatten(result.issues).nested, null, 2)}`;
      throw new DotLottieError(`Invalid states: ${error}`, "INVALID_STATEMACHINE" /* INVALID_STATEMACHINE */);
    }
  }
  _requireValidContextVariables(contextVariables) {
    const result = safeParse(ContextVariablesSchema, contextVariables);
    if (!result.success) {
      const error = `Invalid state machine declaration, ${JSON.stringify(flatten(result.issues).nested, null, 2)}`;
      throw new DotLottieError(`Invalid context variables: ${error}`, "INVALID_STATEMACHINE" /* INVALID_STATEMACHINE */);
    }
  }
  _requireValidListeners(listeners) {
    const result = safeParse(ListenersSchemas, listeners);
    if (!result.success) {
      const error = `Invalid state machine declaration, ${JSON.stringify(flatten(result.issues).nested, null, 2)}`;
      throw new DotLottieError(`Invalid listeners: ${error}`, "INVALID_STATEMACHINE" /* INVALID_STATEMACHINE */);
    }
  }
  _requireValidTransitions(transitions) {
    const result = safeParse(TransitionsSchema, transitions);
    if (!result.success) {
      const error = `Invalid state machine declaration, ${JSON.stringify(flatten(result.issues).nested, null, 2)}`;
      throw new DotLottieError(`Invalid transitions: ${error}`, "INVALID_STATEMACHINE" /* INVALID_STATEMACHINE */);
    }
  }
};

// src/node/lottie-state-machine.ts
var LottieStateMachine = class extends DotLottieStateMachineCommon {
  constructor(options) {
    super(options);
  }
};

export { LottieStateMachine };
//# sourceMappingURL=lottie-state-machine.js.map